{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","fullTodos","userId","usersFromServer","find","App","useState","setTodos","setTitle","submit","setSubmit","setUserId","biggestID","biggest","forEach","action","method","onSubmit","e","preventDefault","trim","newTodo","state","addTodo","type","placeholder","value","onChange","target","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ef127f0.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { FullTodo } from '../../types/FullTodo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: FullTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    title, completed, user, id,\n  },\n}) => (\n  <article\n    data-id={id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{title}</h2>\n\n    {user && <UserInfo user={user} />}\n  </article>\n);\n","import React from 'react';\nimport { FullTodo } from '../../types/FullTodo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: FullTodo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"TodoList\">\n    {\n      todos.map((todo) => (\n        <li key={todo.id}>\n          <TodoInfo todo={todo} />\n        </li>\n      ))\n    }\n  </ul>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Todo } from './types/Todo';\nimport { FullTodo } from './types/FullTodo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst fullTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(user => user.id === todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(fullTodos);\n  const [title, setTitle] = useState('');\n  const [submit, setSubmit] = useState(false);\n  const [userId, setUserId] = useState(0);\n\n  function biggestID() {\n    let biggest = 0;\n\n    todos.forEach(todo => {\n      if (todo.id > biggest) {\n        biggest = todo.id;\n      }\n    });\n\n    return biggest + 1;\n  }\n\n  const addTodo = () => {\n    const newTodo: FullTodo = {\n      id: biggestID(),\n      title,\n      completed: false,\n      userId,\n      user: usersFromServer.find(user => user.id === userId),\n    };\n\n    setTodos((state => (\n      [...state, newTodo]\n    )));\n  };\n\n  const resetForm = () => {\n    setSubmit(false);\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmit(true);\n\n    if (title.trim() && userId) {\n      addTodo();\n      resetForm();\n    }\n  };\n\n  const handlerTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n\n  const handlerUser = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handlerTitle}\n            />\n            {\n              submit && !title\n              && (<span className=\"error\">Please enter a title</span>)\n            }\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handlerUser}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(person => (\n                <option key={person.id} value={person.id}>\n                  {person.name}\n                </option>\n              ))}\n            </select>\n\n            {\n              submit && !userId\n              && (<span className=\"error\">Please choose a user</span>)\n            }\n          </label>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}